name: Deploy to GitHub Pages

# Run workflow on every push to the master branch
on:
  push:
    branches: [main]

jobs:
  deploy-to-github-pages:
    # use ubuntu-latest image to run steps on
    runs-on: ubuntu-latest
    steps:
      # uses GitHub's checkout action to checkout code form the master branch
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "10.0.x"
          dotnet-quality: "preview"

      # set base href
      # - name: Replace base-tag in index.html
      #   run: |
      #     sed -i 's/<base href="\/" \/>/<base href="\/hxbc-www\/" \/>/g' wwwroot/index.html
      - name: Get Version from version.txt
        id: get_version
        shell: pwsh
        run: |
          $version = Get-Content version.txt
          $env:CURRENT_VERSION = $version.ToString()
          echo "::set-output name=CURRENT_VERSION::$env:CURRENT_VERSION"

      - name: Replace ###VERSION### in AboutVersion.razor
        run: |
          sed -i "s/###VERSION###/${{ steps.get_version.outputs.CURRENT_VERSION }}/g" Apps/AboutVersion.razor

      - name: Replace ###COMMIT### in AboutVersion.razor
        run: |
          sed -i "s/###COMMIT###/${GITHUB_SHA}/g" Apps/AboutVersion.razor

      - name: build Tailwind minified CSS
        run: |
          npm install -D tailwindcss
          npx tailwindcss -i ./wwwroot/css/tw.css -o ./wwwroot/css/tw.min.css

      - name: minify and obfuscate js files
        run: |
          npm install -D terser
          npx terser ./wwwroot/js/*.js --compress --mangle --output ./wwwroot/js/app.min.js

      - name: add app.min.js to index.html
        run: |
          sed -i 's|<script src="js/app.js"></script>|<script src="js/app.min.js"></script>|g' wwwroot/index.html

      # add build hash to all css, js and json files in wwwroot and subfolders
      - name: Add build hash to all css, js and json files
        run: |
          npm install -D hashmark
          # Generate hashed filenames and get the mapping
          find ./wwwroot -name "*.css" -o -name "*.js" -o -name "*.json" | while read file; do
            hash=$(sha256sum "$file" | cut -d' ' -f1 | cut -c1-8)
            dir=$(dirname "$file")
            filename=$(basename "$file")
            name="${filename%.*}"
            ext="${filename##*.}"
            newname="${name}.${hash}.${ext}"
            mv "$file" "${dir}/${newname}"
            echo "Renamed $file to ${dir}/${newname}"
          done

      - name: change img/wallpapers/data.json in Constants to the new hashed filename
        run: |
          # Find the new hashed filename for data.json
          new_data_json=$(find ./wwwroot/img/wallpapers -name "data.*.json" | head -n 1)
          if [ -n "$new_data_json" ]; then
            new_data_json_name=$(basename "$new_data_json")
            sed -i "s|img/wallpapers/data.json|img/wallpapers/${new_data_json_name}|g" Constants.cs
          else
            echo "No hashed data.json file found."
          fi

      - name: Update references in HTML files to use hashed filenames
        run: |
          # Update CSS references
          for css in $(find ./wwwroot -name "*.*.css"); do
            filename=$(basename "$css")
            original_name=$(echo "$filename" | sed 's/\.[^.]*\.css$/.css/')
            find ./wwwroot -name "*.html" -exec sed -i "s|$original_name|$filename|g" {} +
          done
          
          # Update JS references  
          for js in $(find ./wwwroot -name "*.*.js"); do
            filename=$(basename "$js")
            original_name=$(echo "$filename" | sed 's/\.[^.]*\.js$/.js/')
            find ./wwwroot -name "*.html" -exec sed -i "s|$original_name|$filename|g" {} +
          done

      - name: Add cache-busting headers to index.html
        run: |
          # Add meta tag to prevent caching of index.html itself
          sed -i '/<head>/a\    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">\n    <meta http-equiv="Pragma" content="no-cache">\n    <meta http-equiv="Expires" content="0">' wwwroot/index.html

      # Restore NuGet packages
      - name: Restore NuGet packages
        run: dotnet restore HaxorByteClub.sln

      - name: Get list of all nugets and their versions
        run: |
          dotnet list HaxorByteClub.csproj package --include-transitive > credits.txt
          sed -i 's/\\r\\n/\\n/g' credits.txt
          sed -i 's/\\r/\\n/g' credits.txt
          sed -i 's/\\n/\\r\\n/g' credits.txt
          credits=$(awk '{printf "%s\\n", $0}' credits.txt | sed 's/[&/\]/\\&/g') # Escape special characters and handle newlines
          sed -i "s|###CREDITS###|${credits}|g" Apps/AboutVersion.razor

      # publishes Blazor project to the release-folder
      - name: Publish .NET Core Project
        run: dotnet publish HaxorByteClub.csproj -c Release -o release --nologo

      # copy index.html to 404.html to serve the same file when a file is not found
      - name: copy index.html to 404.html
        run: cp release/wwwroot/index.html release/wwwroot/404.html

      # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
      - name: Add .nojekyll file
        run: touch release/wwwroot/.nojekyll

      - name: Commit wwwroot to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: release/wwwroot
      - name: Create GitHub Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
          custom_tag: ${{ steps.get_version.outputs.CURRENT_VERSION }}
        continue-on-error: true
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        continue-on-error: true
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.get_version.outputs.CURRENT_VERSION }}
          body: |
            # Release ${{ steps.get_version.outputs.CURRENT_VERSION }}
            based on the commit: ${{ github.event.repository.full_name }}@${{ github.sha }}.
