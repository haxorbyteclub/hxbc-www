let zIndex = 100; // Start with an arbitrary value for z-index


window.setupDragElement = function (id) {
	var elmnt = document.getElementById(id);
	var startX = 0, startY = 0, initialX = 0, initialY = 0;
	var header = elmnt.querySelector('.title-bar');
	header.onmousedown = dragMouseDown;

	const maxX = window.innerWidth - 400; // Assuming the width of the window is 300px
	const maxY = window.innerHeight - 400; // Assuming a rough height for the window
	const randomX = Math.floor(Math.random() * Math.max(1, maxX));
	const randomY = Math.floor(Math.random() * Math.max(1, maxY));

	elmnt.style.transform = `translate(${randomX}px, ${randomY}px)`;

	header.addEventListener('touchstart', dragMouseDown);
	header.addEventListener('touchmove', elementDrag);
	header.addEventListener('touchend', closeDragElement);

	function dragMouseDown(e) {
		// Prevent drag if the target is a button or inside a button
		if (e.target.closest('button, a, input, textarea, select, [tabindex]:not([tabindex="-1"])')) {
			return;
		}
		
		e.preventDefault();
		// Bring the current window to the front
		elmnt.style.zIndex = zIndex++;

		if (e.type === 'touchstart') {
			startX = e.touches[0].clientX;
			startY = e.touches[0].clientY;
		} else {
			startX = e.clientX;
			startY = e.clientY;
		}

		let transform = getComputedStyle(elmnt).transform;
		if (transform !== 'none') {
			let matrix = new DOMMatrixReadOnly(transform);
			initialX = matrix.m41;
			initialY = matrix.m42;
		}

		document.onmouseup = closeDragElement;
		document.onmousemove = elementDrag;
	}

	function elementDrag(e) {
		e.preventDefault();
		let clientX, clientY;
		if (e.type === 'touchmove') {
			clientX = e.touches[0].clientX;
			clientY = e.touches[0].clientY;
		} else {
			clientX = e.clientX;
			clientY = e.clientY;
		}

		let deltaX = clientX - startX;
		let deltaY = clientY - startY;

		let newX = initialX + deltaX;
		let newY = initialY + deltaY;

		newX = Math.max(0, Math.min(newX, window.innerWidth - elmnt.offsetWidth));
		newY = Math.max(0, Math.min(newY, window.innerHeight - elmnt.offsetHeight));

		elmnt.style.transform = `translate(${newX}px, ${newY}px)`;
	}

	function closeDragElement() {
		document.onmouseup = null;
		document.onmousemove = null;
		document.ontouchend = null;
		document.ontouchmove = null;
	}
}

window.bringToFront = function (id) {
	const elmnt = document.getElementById(id);
	elmnt.style.zIndex = zIndex++;
}

// Additionally, to bring a window to front when clicked, not just when dragged
document.addEventListener('click', function (e) {
	if (e.target.classList.contains('draggable') || e.target.closest('.draggable')) {
		let targetEl = e.target.closest('.draggable');
		targetEl.style.zIndex = zIndex++;
	}
}, true);


function updateTimeAndDate() {
	const dateElement = document.getElementById('currentDate');
	const timeElement = document.getElementById('currentTime');
	const now = new Date();
	dateElement.textContent = now.toLocaleDateString();
	timeElement.textContent = now.toLocaleTimeString();
}

window.setupClock = function () {

	setInterval(updateTimeAndDate, 1000); // Update the date and time every second
	updateTimeAndDate(); // Initial call to display the date and time
}

let audioPlayerRef;

window.initializeAudioPlayer = function (dotNetRef) {
	audioPlayerRef = dotNetRef;
};

window.playAudio = function (url) {
	stopEqualizer();
	if (document.querySelector('audio')) {
		document.querySelector('audio').remove();
	}
	var audio = document.createElement('audio');
	audio.src = url;
	audio.autoplay = true;
	audio.loop = false;
	audio.style.display = 'none';
	document.body.appendChild(audio);

	audio.addEventListener('timeupdate', function () {
		var progress = document.querySelector('.progress');
		var value = 0;
		if (audio.currentTime > 0) {
			value = Math.floor((100 / audio.duration) * audio.currentTime);
		}
		var currentTimeSpan = document.querySelector('.audio-current-time');
		if (currentTimeSpan) {
			currentTimeSpan.textContent = ('0' + Math.floor(audio.currentTime / 60)).slice(-2) + ':' + ('0' + Math.floor(audio.currentTime % 60)).slice(-2);
		}
		if (progress) {
			progress.style.width = value + '%';
		}
	});

	audio.addEventListener('ended', function () {
		if (audioPlayerRef) {
			audioPlayerRef.invokeMethodAsync('PlayNext');
		}
	});

	setTimeout(function () {
		animateEqualizer();
	}, 500);
};

window.stopAudio = function () {
	stopEqualizer();
	if (document.querySelector('audio')) {
		document.querySelector('audio').remove();
	}
}

window.playPauseAudio = function () {
	var audio = document.querySelector('audio');
	if (audio.paused) {
		audio.play();
		animateEqualizer();

	} else {
		audio.pause();
		stopEqualizer();
	}
}

var intervalIds = [];

function animateEqualizer() {
	// Clear existing intervals
	intervalIds.forEach(clearInterval);
	intervalIds = [];

	var bars = document.querySelectorAll('.bar');
	bars.forEach(function (bar) {
		var intervalId = setInterval(function () {
			bar.style.height = Math.floor(Math.random() * 100) + '%';
		}, Math.floor(Math.random() * 800));
		intervalIds.push(intervalId);
	});
}

function stopEqualizer() {
	intervalIds.forEach(clearInterval);
	intervalIds = [];
	var bars = document.querySelectorAll('.bar');
	bars.forEach(function (bar) {
		bar.style.height = '0%';
	});
}


// Handle window resize
window.addEventListener('resize', function () {
	const draggableElements = document.querySelectorAll('.draggable');
	draggableElements.forEach(elmnt => {
		let transform = getComputedStyle(elmnt).transform;
		if (transform !== 'none') {
			let matrix = new DOMMatrixReadOnly(transform);
			let currentX = matrix.m41;
			let currentY = matrix.m42;

			let newX = Math.min(currentX, window.innerWidth - elmnt.offsetWidth);
			let newY = Math.min(currentY, window.innerHeight - elmnt.offsetHeight);

			elmnt.style.transform = `translate(${newX}px, ${newY}px)`;
		}
	});
});


window.changeBackground = function (cssClass) {
	var wallpaper = document.getElementById('wallpaper');
	wallpaper.classList = '';
	wallpaper.classList.add(cssClass);
}

window.triggerDownload = function (url) {
	const link = document.createElement('a');
	link.href = url;
	link.download = url.substring(url.lastIndexOf('/') + 1);
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
}



window.setupIconDrag = function () {
	const icons = document.querySelectorAll(".desktop-icon");
	const occupiedPositions = []; // Array to store occupied positions

	icons.forEach(icon => {
		let isDragging = false; // Flag to track dragging

		// Function to check if a position overlaps with existing icons
		const isOverlapping = (x, y, width, height) => {
			return occupiedPositions.some(pos => {
				return (
					x < pos.x + pos.width &&
					x + width > pos.x &&
					y < pos.y + pos.height &&
					y + height > pos.y
				);
			});
		};

		// Set random initial positions for the icons
		const maxX = window.innerWidth - icon.offsetWidth; // Ensure the icon stays within the screen width
		const maxY = window.innerHeight - icon.offsetHeight - 50; // Subtract 50px for the top bar height
		let randomX, randomY;

		// Keep generating random positions until no overlap is found
		do {
			randomX = Math.floor(Math.random() * Math.max(1, maxX));
			randomY = Math.floor(Math.random() * Math.max(1, maxY)) + 50; // Ensure it starts below the top bar
		} while (isOverlapping(randomX, randomY, icon.offsetWidth, icon.offsetHeight));

		// Store the position as occupied
		occupiedPositions.push({
			x: randomX,
			y: randomY,
			width: icon.offsetWidth,
			height: icon.offsetHeight
		});

		icon.style.position = "absolute";
		icon.style.left = `${randomX}px`;
		icon.style.top = `${randomY}px`;
		icon.style.cursor = "grab";

		// Add drag-and-drop functionality
		icon.addEventListener("mousedown", (e) => {
			isDragging = false; // Reset dragging flag
			icon.style.cursor = "grabbing";
			let shiftX = e.clientX - icon.getBoundingClientRect().left;
			let shiftY = e.clientY - icon.getBoundingClientRect().top;

			const moveAt = (pageX, pageY) => {
				isDragging = true; // Set dragging flag
				let newX = Math.max(0, Math.min(pageX - shiftX, window.innerWidth - icon.offsetWidth));
				let newY = Math.max(50, Math.min(pageY - shiftY, window.innerHeight - icon.offsetHeight)); // Prevent moving into the top bar
				icon.style.left = `${newX}px`;
				icon.style.top = `${newY}px`;
			};

			const onMouseMove = (e) => {
				moveAt(e.pageX, e.pageY);
			};

			document.addEventListener("mousemove", onMouseMove);

			icon.addEventListener("mouseup", () => {
				document.removeEventListener("mousemove", onMouseMove);
				icon.style.cursor = "grab";
			}, { once: true });
		});

		// Prevent @onclick from firing if the icon was dragged
		icon.addEventListener("click", (e) => {
			if (isDragging) {
				e.stopImmediatePropagation(); // Prevent the click event from propagating
			}
		});

		icon.ondragstart = () => false; // Disable default drag behavior
	});
};38h1.375v1.375h-1.375zM15.438 15.813h1.375v1.375h-1.375zM14.063 17.188h1.375v1.375h-1.375zM12.688 18.563h1.375v1.375h-1.375z'/%3E%3Cpath fill='%23000' d='M11.313 19.938h1.375v1.375h-1.375zM5.813 7.563h5.5v1.375h-5.5zM11.313 8.937v-5.5h1.375v5.5z'/%3E%3C/svg%3E");
	height: 23.38px
}

::-webkit-scrollbar-button:horizontal:end:active {
	background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='23' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%23fff' stroke='%23000' d='M23.19 22.19v-21H.81v21z'/%3E%3Cpath fill='%23000' d='M.685 21.69v-20h2v20zM11.312 21.315v-5.5h1.375v5.5zM5.811 15.815V8.94h11.002v6.875z'/%3E%3Cpath fill='%23000' d='M5.811 15.815h5.501v1.375H5.811zM18.189 13.065h1.375v1.375h-1.375zM19.564 11.69h1.375v1.375h-1.375zM11.312 3.44h1.375v1.375h-1.375zM12.688 4.815h1.375V8.94h-1.375zM14.063 6.19h1.375v2.75h-1.375zM15.438 7.565h1.375V8.94h-1.375zM16.814 8.94h1.375v1.375h-1.375zM18.189 10.315h1.375v2.75h-1.375zM16.814 10.315h1.375v5.5h-1.375zM15.438 15.815h1.375v1.375h-1.375zM14.063 15.815h1.375v2.75h-1.375zM12.688 15.815h1.375v4.125h-1.375zM11.312 19.94h1.375v1.375h-1.375zM5.811 7.565h5.501V8.94H5.811z'/%3E%3Cpath fill='%23000' d='M11.312 8.94v-5.5h1.375v5.5z'/%3E%3C/svg%3E");
	background-repeat: no-repeat;
	height: 23.38px
}

body {
	background: linear-gradient(90deg, var(--primary) 21px, transparent 1%) center, linear-gradient(var(--primary) 21px, transparent 1%) center, var(--secondary);
	background-size: 22px 22px;
	background-attachment: fixed
}

a {
	color: var(--secondary);
	text-decoration: underline
}

hr {
	border-top: .15em solid var(--secondary)
}

.heading,
h1 {
	font-family: Chicago;
	font-size: 1em
}

h2 {
	font-family: Chicago;
	font-size: 2em
}

.standard-button {
	display: block;
	min-width: 59px;
	min-height: 20px
}

.standard-dialog {
	border: 2px solid;
	padding: 10px;
	box-shadow: var(--box-shadow);
	background-color: var(--primary)
}

.alert-box,
.modal-dialog {
	width: auto;
	padding: 13px;
	background: var(--primary)
}

.alert-contents,
.modal-contents {
	padding: 10px
}

.modeless-dialog {
	height: 100%;
	padding: 1.5rem .5rem .5rem .5rem;
	font-size: 18px;
	letter-spacing: -.025em
}

.inner-border {
	border-color: var(--secondary);
	border-top: 3.5px solid;
	border-bottom: 3.5px solid;
	border-left: 5px solid;
	border-right: 5px solid
}

.outer-border {
	border-color: var(--secondary);
	border: 2px solid;
	padding: 3px
}

.title-bar {
	flex: none;
	display: flex;
	align-items: center;
	height: 1.5rem;
	margin: .1rem 0;
	padding: .2rem .1rem;
	background: linear-gradient(var(--secondary) 50%, transparent 50%);
	background-size: 6.6666666667% 13.3333333333%;
	background-clip: content-box
}

.title-bar .title {
	padding: 0 .5em;
	margin: 0 auto;
	font-size: 1.5rem;
	font-weight: 700;
	line-height: 1.1;
	text-align: center;
	background: var(--primary);
	cursor: default;
	font-family: Chicago_12
}

.inactive-title-bar {
	flex: none;
	display: flex;
	align-items: center;
	height: 1.5rem;
	margin: .1rem 0;
	padding: .2rem .1rem;
	background-size: 6.6666666667% 13.3333333333%;
	background-clip: content-box
}

.inactive-title-bar .title {
	padding: 0 .5em;
	margin: 0 auto;
	font-size: 1.5rem;
	font-weight: 700;
	line-height: 1.1;
	text-align: center;
	cursor: default;
	font-family: Chicago_12;
	color: var(--tertiary)
}

.title-bar button {
	position: relative;
	display: block;
	width: 40px;
	height: 40px;
	margin: 0 .2rem;
	border: 4px solid var(--secondary);
	background-color: var(--primary);
	cursor: pointer;
	transform: scale(.5)
}

.title-bar button span {
	position: absolute !important;
	clip: rect(1px 1px 1px 1px);
	clip: rect(1px, 1px, 1px, 1px)
}

.title-bar button.close::after,
.title-bar button.close::before {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	opacity: 0
}

.title-bar button.close::before {
	background: linear-gradient(var(--secondary) 0, var(--secondary) 100%) left center, linear-gradient(var(--secondary) 0, var(--secondary) 100%) right center, linear-gradient(var(--secondary) 0, var(--secondary) 100%) center top, linear-gradient(var(--secondary) 0, var(--secondary) 100%) center bottom;
	background-size: 30% 4px, 30% 4px, 4px 30%, 4px 30%;
	background-repeat: no-repeat
}

.title-bar button.close::after {
	background: linear-gradient(var(--secondary) 0, var(--secondary) 100%) left center, linear-gradient(var(--secondary) 0, var(--secondary) 100%) right center, linear-gradient(var(--secondary) 0, var(--secondary) 100%) center top, linear-gradient(var(--secondary) 0, var(--secondary) 100%) center bottom;
	background-size: 22.5% 3.6363636364px, 22.5% 3.6363636364px, 3.6363636364px 22.5%, 3.6363636364px 22.5%;
	background-repeat: no-repeat;
	transform: rotate(45deg) scale(1.1)
}

.title-bar button.close:active::after,
.title-bar button.close:active::before {
	opacity: 1
}

.title-bar button.resize {
	background: linear-gradient(var(--secondary) 0, var(--secondary) 100%) left 58%, linear-gradient(to bottom, var(--secondary) 0, var(--secondary) 100%) 58% top;
	background-size: 60% 4px, 4px 60%;
	background-repeat: no-repeat;
	background-color: var(--primary)
}

.title-bar button.resize:active {
	background: var(--primary)
}

.title-bar button.hidden {
	visibility: hidden
}

.window {
	flex-direction: column;
	margin: 1rem;
	min-width: 320px;
	overflow: hidden;
	background-color: var(--primary);
	border: .1em solid var(--secondary);
	font-family: Inconsolata, Menlo, Chicago, Geneva
}

.window-pane {
	overflow-y: scroll;
	height: 100%;
	padding: 1rem 2rem;
	font-size: 18px;
	letter-spacing: -.025em
}

.window-pane::-webkit-scrollbar {
	width: 22px;
	background-color: var(--primary)
}

.window-pane::-webkit-scrollbar-track {
	background: linear-gradient(45deg, var(--secondary) 25%, transparent 25%, transparent 75%, var(--secondary) 75%, var(--secondary)), linear-gradient(45deg, var(--secondary) 25%, transparent 25%, transparent 75%, var(--secondary) 75%, var(--secondary));
	background-color: var(--primary);
	background-size: 4px 4px;
	background-position: 0 0, 2px 2px;
	width: 10px;
	border-left: 4px solid var(--secondary)
}

.window-pane::-webkit-scrollbar-thumb {
	width: 20px;
	box-sizing: content-box;
	background-color: var(--primary);
	border: 2px solid var(--secondary);
	border-right: none
}

.separator {
	flex: none;
	display: flex;
	flex-direction: row;
	justify-content: space-between;
	border-top: .1rem solid var(--secondary);
	border-width: .1rem 0;
	font-size: 1rem
}

.details-bar {
	flex: none;
	display: flex;
	flex-direction: row;
	justify-content: space-between;
	padding: .4rem .8rem;
	border: .1rem solid var(--secondary);
	border-width: .1rem 0;
	font-size: 1rem;
	font-weight: 100
}

.btn,
.btn-default {
	min-height: 20px;
	min-width: 59px;
	padding: 0 20px;
	text-align: center;
	background: var(--primary);
	border-style: solid;
	border-width: 5.5px;
	border-image: url(icons/button.svg) 30 stretch;
	color: var(--secondary);
	text-align: center;
	text-decoration: none;
	font-size: 18px;
	font-family: Chicago_12;
	cursor: pointer
}

.btn:active {
	background: var(--secondary);
	border-radius: 6px;
	color: var(--primary);
	font-family: Chicago_12
}

.btn:disabled {
	min-height: 20px;
	min-width: 59px;
	text-align: center;
	background: var(--primary);
	border-style: solid;
	border-width: 5.5px;
	border-image: url(icons/button.svg) 30 stretch;
	color: var(--disabled);
	text-align: center;
	text-decoration: none;
	font-size: 18px;
	font-family: Chicago_12
}

.btn-default {
	border-image: url(icons/button-default.svg) 60 stretch;
	border-width: .5em
}

.btn-default:active {
	border-radius: 12px
}

input {
	border: 1.5px solid var(--secondary);
	font-family: Chicago_12;
	font-size: 18px;
	padding-left: 5px
}

input:focus {
	outline: 0
}

input[type=color]:focus-visible,
input[type=date]:focus-visible,
input[type=datetime-local]:focus-visible,
input[type=datetime]:focus-visible,
input[type=email]:focus-visible,
input[type=month]:focus-visible,
input[type=number]:focus-visible,
input[type=password]:focus-visible,
input[type=search]:focus-visible,
input[type=tel]:focus-visible,
input[type=text]:focus-visible,
input[type=time]:focus-visible,
input[type=week]:focus-visible,
textarea:focus {
	background: var(--secondary);
	color: var(--primary)
}

input[type=radio]+label::before {
	border-image: svg-load("./icons/radio-border.svg");
	width: 20px;
	height: 20px
}

input[type=checkbox]+label::before {
	border: 1.5px solid var(--secondary);
	width: 20px;
	height: 20px
}

input[type=checkbox],
input[type=radio] {
	appearance: none;
	-webkit-appearance: none;
	-moz-appearance: none;
	margin: 0;
	background: 0;
	position: fixed;
	opacity: 0;
	border: none
}

input[type=checkbox]+label,
input[type=radio]+label {
	line-height: 13px;
	padding-left: 5px
}

input[type=radio]+label {
	position: relative;
	margin-left: var(--radio-total-width)
}

input[type=radio]+label::before {
	content: "";
	position: absolute;
	top: 0;
	left: calc(-1 * (var(--radio-total-width-precalc)));
	display: inline-block;
	width: var(--radio-width);
	height: var(--radio-width);
	margin-right: var(--radio-label-spacing);
	background: svg-load("./icons/radio-border.svg")
}

input[type=radio]:focus-visible+label::before,
input[type=radio]:hover+label::before {
	background-image: svg-load("./icons/radio-border-focused.svg")
}

input[type=radio]:checked+label::after {
	content: "";
	display: block;
	width: var(--radio-dot-width);
	height: var(--radio-dot-width);
	top: var(--radio-dot-top);
	left: var(--radio-dot-left);
	position: absolute;
	background: svg-load("./icons/radio-dot.svg")
}

input[type=checkbox]+label {
	position: relative;
	margin-left: var(--checkbox-total-width)
}

input[type=checkbox]+label::before {
	content: "";
	position: absolute;
	left: calc(-1 * (var(--checkbox-total-width-precalc)));
	display: inline-block;
	width: var(--checkbox-width);
	height: var(--checkbox-width);
	background: var(--button-highlight);
	box-shadow: var(--border-field);
	margin-right: var(--radio-label-spacing)
}

input[type=checkbox]:focus-visible+label::before,
input[type=checkbox]:hover+label::before {
	outline: 1px solid var(--secondary)
}

input[type=checkbox]:checked+label::after {
	content: "";
	display: block;
	width: var(--checkmark-width);
	height: var(--checkmark-width);
	position: absolute;
	top: var(--checkmark-top);
	left: calc(-1 * (var(--checkbox-total-width-precalc)) + var(--checkmark-left));
	background: svg-load("./icons/checkmark.svg");
	background-repeat: no-repeat
}

input[type=checkbox][disabled]+label::before {
	background: var(--surface)
}

input[type=checkbox][disabled]:checked+label::after {
	background: svg-load("./icons/checkmark-disabled.svg")
}

.field-row {
	display: flex;
	align-items: center;
	font-family: Chicago_12;
	font-size: 1em
}

[class^=field-row]+[class^=field-row] {
	margin-top: var(--grouped-element-spacing)
}

.field-row>*+* {
	margin-left: var(--grouped-element-spacing)
}

.apple {
	background: svg-load("./icons/apple.svg");
	height: 22px;
	width: 18px;
	background-repeat: no-repeat;
	border: none;
	display: inline-block;
	margin-right: 2px
}

form {
	font-family: Inconsolata, Menlo, Chicago, Geneva;
	font-size: 14px
}

select {
	border: 1.5px solid;
	height: auto;
	width: 10rem;
	font-family: Chicago_12;
	font-size: 18px;
	background-image: svg-load("./icons/select-button.svg");
	background-position: top 2px right 2px;
	background-repeat: no-repeat;
	appearance: none;
	-webkit-appearance: none;
	-moz-appearance: none;
	position: relative;
	padding-left: 20px;
	-webkit-box-shadow: 2px 8px 0 0 var(--secondary);
	-moz-box-shadow: 2px 8px 0 0 var(--secondary);
	box-shadow: 2px 2px 0 -1px var(--secondary)
}

ul[role] {
	margin: 0;
	padding: 0;
	list-style: none;
	cursor: pointer;
	font-family: Chicago_12;
	font-size: 1em
}

ul[role=menu-bar] {
	display: flex;
	background: var(--primary)
}

ul[role=menu-bar]>[role=menu-item] {
	position: relative;
	padding: 6px 10px
}

ul[role=menu-bar]>[role=menu-item]:focus,
ul[role=menu-bar]>[role=menu-item]:focus-within,
ul[role=menu-bar]>[role=menu-item]:hover {
	background: var(--secondary);
	color: var(--primary);
	outline: 0
}

ul[role=menu-bar]>[role=menu-item][aria-haspopup=false] * {
	color: inherit;
	background: inherit;
	text-decoration: none
}

ul[role=menu] {
	position: relative;
	min-width: 200px;
	background: var(--primary);
	color: initial;
	border: 1px solid;
	box-shadow: var(--box-shadow)
}

ul[role=menu]::before {
	content: "";
	pointer-events: none;
	position: absolute;
	left: 28px;
	width: 2px;
	box-shadow: inset 1px 0 rgba(0, 0, 0, .15), inset -1px 0 var(--primary)
}

[role=menu-item] ul[role=menu] {
	display: none;
	position: absolute;
	left: 0;
	top: 100%;
	z-index: 99
}

ul[role=menu]>[role=menu-item]>a,
ul[role=menu]>[role=menu-item]>button,
ul[role=menu]>[role=menu-item][aria-haspopup=true] {
	all: unset;
	position: relative;
	padding: 5px 20px;
	display: block;
	width: 100%;
	box-sizing: border-box
}

ul[role=menu]>[role=menu-item]>a:focus,
ul[role=menu]>[role=menu-item]>a:hover,
ul[role=menu]>[role=menu-item]>button:focus,
ul[role=menu]>[role=menu-item]>button:hover,
ul[role=menu]>[role=menu-item][aria-haspopup=true]:focus,
ul[role=menu]>[role=menu-item][aria-haspopup=true]:hover {
	background: var(--secondary);
	color: var(--primary)
}

ul [role=menu-item] {
	position: relative
}

ul [role=menu-item]:focus-within>[role=menu],
ul [role=menu-item]:focus>[role=menu] {
	display: block
}

ul [role=menu-item].divider::after {
	content: "";
	pointer-events: none;
	display: block;
	padding: 0;
	border-top: 1.5px dotted var(--secondary)
}

.menu-items>li {
	margin-bottom: 1rem
} 1px solid;
  box-shadow: var(--box-shadow);
}
ul[role="menu"]::before {
  content: "";
  pointer-events: none;
  position: absolute;
  left: 28px;
  width: 2px;
  box-shadow: inset 1px 0 rgba(0, 0, 0, 0.15), inset -1px 0 var(--primary);
}
[role="menu-item"] ul[role="menu"] {
  display: none;
  position: absolute;
  left: 0;
  top: 100%;
  z-index: 99;
}
ul[role="menu"] > [role="menu-item"] > a, ul[role="menu"] > [role="menu-item"] > button, ul[role="menu"] > [role="menu-item"][aria-haspopup="true"] {
  all: unset;
  position: relative;
  padding: 5px 20px;
  display: block;
  width: 100%;
  box-sizing: border-box;

}
ul[role="menu"] > [role="menu-item"] > a:hover, ul[role="menu"] > [role="menu-item"] > button:hover, ul[role="menu"] > [role="menu-item"][aria-haspopup="true"]:hover, ul[role="menu"] > [role="menu-item"] > a:focus, ul[role="menu"] > [role="menu-item"] > button:focus, ul[role="menu"] > [role="menu-item"][aria-haspopup="true"]:focus {
  background: var(--secondary);
  color: var(--primary);
}
ul [role="menu-item"] {
  position: relative;
}
ul [role="menu-item"]:focus > [role="menu"], ul [role="menu-item"]:focus-within > [role="menu"] {
  display: block;
}
ul [role="menu-item"].divider::after {
  content: "";
  pointer-events: none;
  display: block;
  padding: 0;
  border-top: 1.5px dotted var(--secondary);
}

/* styles specific to demo page */
.menu-items > li {
  margin-bottom: 1rem;
}
ar(--tw-leading, var(--text-xs--line-height));
  }
  .text-\[11px\] {
    font-size: 11px;
  }
  .leading-\[1\.2\] {
    --tw-leading: 1.2;
    line-height: 1.2;
  }
  .leading-none {
    --tw-leading: 1;
    line-height: 1;
  }
  .font-\[600\] {
    --tw-font-weight: 600;
    font-weight: 600;
  }
  .font-black {
    --tw-font-weight: var(--font-weight-black);
    font-weight: var(--font-weight-black);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-thin {
    --tw-font-weight: var(--font-weight-thin);
    font-weight: var(--font-weight-thin);
  }
  .uppercase {
    text-transform: uppercase;
  }
  .underline {
    text-decoration-line: underline;
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-\[150ms\] {
    --tw-duration: 150ms;
    transition-duration: 150ms;
  }
  .sm\:max-w-md {
    @media (width >= 40rem) {
      max-width: var(--container-md);
    }
  }
  .md\:max-w-lg {
    @media (width >= 48rem) {
      max-width: var(--container-lg);
    }
  }
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}
@keyframes pulse {
  50% {
    opacity: 0.5;
  }
}
@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: none;
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
