@page "/"
@using HaxorByteClub.Apps
@inject IJSRuntime _js

<PageTitle>Home</PageTitle>
		<div id="wallpaper"></div>
<ul role="menu-bar">
	<li role="menu-item" class="li-icon" tabindex="0" aria-haspopup="true">
		<div class="flex">
			<img src="img/logo-temp.png" alt="Logo" class="logo">
		</div>
		<ul role="menu">
			<li role="menu-item" @onclick="ToggleAboutVersion"><a href="#menu">About</a></li>
			<li role="menu-item" @onclick="ToggleDisplayProperties"><a href="#menu">Display Properties</a></li>
			<li role="menu-item" class="divider"><a href="#menu">Socials</a></li>
			<li role="menu-item"><a href="https://twitter.com/sakofchit">HaxorByteShop</a></li>
		</ul>
	</li>
	<li class="date-time-container" tabindex="0" aria-haspopup="true">
		<div class="date-time">
			<div class="current-time" id="currentTime"></div>
			<div class="current-date" id="currentDate"></div>
		</div>
	</li>
</ul>

<div class="desktop-icons">
	<div class="desktop-icon" @onclick="ToggleAudioPlayer">
		<img src="img/player-icon.png" alt="player icon">
		<span>Audio Player</span>
	</div>
	<div class="desktop-icon" @onclick="ToggleContactForm">
		<img src="img/contact-icon.png" alt="contact form icon">
		<span>Contact Us</span>
	</div>
	<div class="desktop-icon" @onclick="ToggleAbout">
		<img src="img/info-icon.png" alt="about icon">
		<span>About</span>
	</div>
	<div class="desktop-icon" @onclick="ToggleGuestBook">
		<img src="img/guestbook-icon.png" alt="guestbook icon">
		<span>Guestbook</span>
	</div>
</div>

@foreach (var app in _apps)
{
	@if (app is Welcome welcome)
	{
		<Welcome AppId="@app.AppId" />
	}
	else if (app is Default d)
	{
		<Default AppId="@app.AppId" />
	}
	else if (app is AudioPlayer audioPlayer)
	{
		<AudioPlayer AppId="@app.AppId" />
	}
	else if (app is ContactForm contact)
	{
		<ContactForm AppId="@app.AppId" />
	}
	else if (app is GuestBook guestBook)
	{
		<GuestBook AppId="@app.AppId" />
	}
	else if (app is AboutVersion version)
	{
		<AboutVersion AppId="@app.AppId" />
	}
	else if (app is DisplayProperties display)
	{
		<DisplayProperties AppId="@app.AppId" />
	}
}

@code
{
	List<AppBase> _apps = new();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _js.InvokeVoidAsync("setupClock");
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		WeakReferenceMessenger.Default.Register<RemoveAppMessage>(this, OnRemoveApp);
	}

	void ToggleAudioPlayer()
	{
		if (_apps.Any(a => a is AudioPlayer))
		{
			var app = _apps.FirstOrDefault(a => a is AudioPlayer);
			BringToFront(app.AppId).SafeFireAndForget();
		}
		else
		{
			_apps.Add(new AudioPlayer() { AppId = Guid.NewGuid().ToString() });
		}
	}

	void ToggleContactForm()
	{
		if (_apps.Any(a => a is ContactForm))
		{
			var app = _apps.FirstOrDefault(a => a is ContactForm);
			BringToFront(app.AppId).SafeFireAndForget();
		}
		else
		{
			_apps.Add(new ContactForm() { AppId = Guid.NewGuid().ToString() });
		}
	}

	void ToggleAbout()
	{
		if (_apps.Any(a => a is Welcome))
		{
			var app = _apps.FirstOrDefault(a => a is Welcome);
			BringToFront(app.AppId).SafeFireAndForget();
		}
		else
		{
			_apps.Add(new Welcome() { AppId = Guid.NewGuid().ToString() });
		}
	}

	void ToggleGuestBook()
	{
		if (_apps.Any(a => a is GuestBook))
		{
			var app = _apps.FirstOrDefault(a => a is GuestBook);
			BringToFront(app.AppId).SafeFireAndForget();
		}
		else
		{
			_apps.Add(new GuestBook() { AppId = Guid.NewGuid().ToString() });
		}
	}

	void ToggleAboutVersion()
	{
		if (_apps.Any(a => a is AboutVersion))
		{
			var app = _apps.FirstOrDefault(a => a is AboutVersion);
			BringToFront(app.AppId).SafeFireAndForget();
		}
		else
		{
			_apps.Add(new AboutVersion() { AppId = Guid.NewGuid().ToString() });
		}
	}

	void ToggleDisplayProperties()
	{
		if (_apps.Any(a => a is DisplayProperties))
		{
			var app = _apps.FirstOrDefault(a => a is DisplayProperties);
			BringToFront(app.AppId).SafeFireAndForget();
		}
		else
		{
			_apps.Add(new DisplayProperties() { AppId = Guid.NewGuid().ToString() });
		}
	}



	async Task BringToFront(string id)
	{
		await _js.InvokeVoidAsync("bringToFront", id);
	}

	void OnRemoveApp(object sender, RemoveAppMessage message)
	{
		var app = _apps.FirstOrDefault(a => a.AppId == message.AppId);
		if (app != null)
		{
			_apps.Remove(app);
			StateHasChanged();
		}
	}
}